@using Microsoft.AspNetCore.SignalR.Client;
@using Thiccdal.Shared.Notifications.Chat;
@using Thiccdal.Shared.Notifications;

@inject NavigationManager Navigation
<MudCard>
    <MudCardHeader>Chat</MudCardHeader>
    <MudCardContent>
        <MudGrid>
            <MudItem xs="4">
                <MudTextField T="string" InputType="InputType.Text" Label="Chat message" @bind-value="MessageToSend" />
            </MudItem>
            <MudItem xs="4">
                <MudSelect T="Source" @bind-Value="@ChatMessageTarget">
                    <MudSelectItem Value="@(Source.Twitch)">Twitch</MudSelectItem>
                    <MudSelectItem Value="@(Source.Discord)">Discord</MudSelectItem>
                    <MudSelectItem Value="@(Source.All)">All</MudSelectItem>
                </MudSelect>
            </MudItem>
            <MudItem xs="4" Style="margin-top: auto;">
                <MudButton Variant="Variant.Outlined" Color="Color.Secondary" @onclick="SendChatMessage">Send chat</MudButton>
            </MudItem>
            <MudItem xs="12">
                <MudTable Items="ChatMessages">
                    <ColGroup>
                        <col style="width: 16%;" />
                        <col style="width: 30%;"/>
                        <col />
                    </ColGroup>
                    <HeaderContent>
                        @*<MudTh>Source</MudTh>*@
                        <MudTh>Time</MudTh>
                        @*<MudTh>Channel</MudTh>*@
                        <MudTh>Sender</MudTh>
                        <MudTh>Message</MudTh>
                    </HeaderContent>
                    <RowTemplate>
                        @*<MudTd DataLabel="Source">@context.Source</MudTd>*@
                        <MudTd DataLabel="Time">@context.Timestamp.ToLocalTime().ToLongTimeString()</MudTd>
                        @*<MudTd DataLabel="Channel">@context.Channel</MudTd>*@
                        <MudTd DataLabel="Sender">@context.Sender</MudTd>
                        <MudTd DataLabel="Message">@context.Message</MudTd>
                    </RowTemplate>
                </MudTable>
            </MudItem>
        </MudGrid>
    </MudCardContent>
</MudCard>

@code {
    HubConnection hubConnection = new HubConnectionBuilder()
        .WithUrl("http://localhost:1234/hub")
        .Build();

    List<ChatMessage> ChatMessages = new List<ChatMessage>();

    string? MessageToSend = null;

    Source ChatMessageTarget;

    protected override async Task OnInitializedAsync()
    {
        // Subscribe to the signalr hub and get raw messages as they arrive
        hubConnection.On<IncomingChatMessage>(nameof(IncomingChatMessage), AddChatMessage);

        await hubConnection.StartAsync();

        await base.OnInitializedAsync();
    }

    protected async Task SendChatMessage()
    {
        if (string.IsNullOrWhiteSpace(MessageToSend))
        {
            return;
        }

        await hubConnection.SendAsync(nameof(OutgoingChatMessage), new OutgoingChatMessage(Source.Twitch, "Thindal", "Thiccdal", DateTime.Now, MessageToSend));
        // Twitch does not send back our own messages, so we need to add them to the chat manually
        AddChatMessage(new ChatMessage(ChatMessageTarget, "Thindal", "Thiccdal", DateTime.Now, MessageToSend));

        MessageToSend = null;
    }

    private void AddChatMessage(ChatMessage newChatMessage)
    {
        lock (ChatMessages)
        {
            if (ChatMessages.Count > 20)
            {
                // Remove oldest(last)
                ChatMessages.RemoveAt(20);
            }

            ChatMessages.Insert(0, newChatMessage);

        }
        InvokeAsync(() => StateHasChanged());

    }
}
